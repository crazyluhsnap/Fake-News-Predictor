# -*- coding: utf-8 -*-
"""Fake News Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BKJm6HQZvDQy62lWlT-9gbsHbspbEuL_
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#printing the stopwords in english
print(stopwords.words('english'))

"""Combining fake and real news dataset"""

real_news=pd.read_csv("True.csv")
fake_news=pd.read_csv("Fake.csv")

real_news["label"]=1
fake_news["label"]=0

combined_data=pd.concat([real_news,fake_news],axis=0)

combined_data=combined_data.sample(frac=1, random_state=42).reset_index(drop=True)

combined_data.to_csv("combined_news.csv",index=False)

print("Combined Dataset created successfully")
print("Shape: ", combined_data.shape)
print(combined_data.head())

"""Data Pre-Processing"""

#loading the dataset into pandas dataframe
news_dataset=pd.read_csv('/content/combined_news.csv')

news_dataset.shape

#counting the number of missing values in the dataset
news_dataset.isnull().sum()

#replacing null value with empty string
news_dataset=news_dataset.fillna('')

#merging the title and text column
news_dataset['content']=news_dataset['title']+' '+news_dataset['text']

print(news_dataset['content'])

#separating the data and label
X=news_dataset.drop(columns='label',axis=1)
Y=news_dataset['label']

print(X)
print(Y)

"""Stemming (a process of reducing a word to it's root word)

ex: actor, actress, acting --> act
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content=re.sub('[^a-zA-Z]',' ',content)
  stemmed_content=stemmed_content.lower()
  stemmed_content=stemmed_content.split()
  stemmed_content=[port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content=' '.join(stemmed_content)
  return stemmed_content

news_dataset['content']=news_dataset['content'].apply(stemming)

print(news_dataset['content'])

#separating the data and label
X=news_dataset['content'].values
Y=news_dataset['label'].values

print(X)

print(Y)

#converting the textual data into numerical data
vectorizer=TfidfVectorizer()
vectorizer.fit(X)

X=vectorizer.transform(X)

print(X)

"""Splitting the dataset into train and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

"""Training the Model: Logistic Regression"""

model=LogisticRegression()

model.fit(X_train,Y_train)

"""Evaluation of our model (accuracy score)"""

#checking accuracy
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction, Y_train)

print("Accuracy score of training data: ",training_data_accuracy)

#checking accuracy on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction, Y_test)

print("Accuracy score of test data: ",test_data_accuracy)

"""Making a predictive system"""

X_new=X_test[363]

prediction=model.predict(X_new)
print(prediction)

if(prediction[0]==0):
  print("The news is fake")
else:
  print("The news is real")

print(Y_test[363])